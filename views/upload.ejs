<%- include ("./_header") -%>
    <div class="">
        <div class="image-title">QikLoan</div>
        <h3 style="margin-bottom: 15px;">Capture your photo ID</h3>


        <div id="screenshot" style="text-align:center;">
            <video class="videostream" autoplay=""></video>
            <p><button id="screenshot-button" class="btn btn-primary btn-style ">Capture ID</button></p>
        </div>


        <div>
            <img id="screenshot-img" width="300" height="350" src="" style="display: none;margin: 0 auto;" />
        </div>

        <div style="display: none;color: red;margin-bottom: 15px;" class="errorMessage" id="ErrorMessage">

        </div>

        <a id="uploadBtn" style="display: none;" onclick="verifyPair()">
            <button style="margin: 30px auto;" type="button" class="btn btn-primary btn-style ">
                Upload
            </button>
        </a>
    </div>

    <script type="text/javascript">

        var appId = "2d9288";
        var appKey = "506505f70970ce16988f";

        var selfiImage = '';
        var IdProofImage = '';

        var selfiImageData = sessionStorage.getItem("selfiImage")

        fetch(selfiImageData)
            .then(res => res.blob())
            .then(blob => {
                selfiImage = new File([blob], "camera.jpg", { type: "image/jpeg" })
                console.log(selfiImage)
            })


        var streamObj = '';
        const constraints = {
            video: { width: { exact: 300 }, height: { exact: 350 } }
        };
        const screenshotButton = document.querySelector("#screenshot-button");
        const img = document.querySelector("#screenshot-img");
        const video = document.querySelector("#screenshot video");

        const canvas = document.createElement("canvas");

        navigator.mediaDevices
            .getUserMedia(constraints)
            .then(handleSuccess)
            .catch(handleError);

        screenshotButton.onclick = video.onclick = function () {
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            canvas.getContext("2d").drawImage(video, 0, 0);
            img.src = canvas.toDataURL("image/jpeg");
            img.style.display = 'block'
            console.log(canvas.toDataURL("image/jpeg"));
            document.getElementById("uploadBtn").style.display = 'block'

            fetch(canvas.toDataURL("image/jpeg"))
                .then(res => res.blob())
                .then(blob => {
                    IdProofImage = new File([blob], "idProof.jpg", { type: "image/jpeg" })
                })

            cameraOff()

        };

        function cameraOff() {
            const stream = video.srcObject;
            if (stream) {
                const tracks = stream.getTracks();

                tracks.forEach(function (track) {
                    track.stop();
                });

                video.srcObject = null;
                console.log(video);
                document.getElementById("screenshot").style.display = 'none';
                document.getElementById("screenshot-button").style.display = 'none';

            }
        }

        function handleSuccess(stream) {
            window.stream = stream;
            video.srcObject = stream;
        }

        function handleError(error) {
            console.error("Error: ", error);
        }


        function verifyPair() {
            var formData = new FormData()
            formData.append('image1', selfiImage);
            formData.append('image2', IdProofImage);
            formData.append('type', 'id')
            fetch("https://api.apixplatform.com/facematch/v1/verifyPair", {
                method: 'POST',
                body: formData,
                headers: {
                    "appId": appId,
                    "appKey": appKey,
                    "X-Authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwaXhwbGF0Zm9ybS5jb20iLCJzdWIiOiI4NGJkYjQ2NC00MDYyLTExZWMtOTYzMi0wMzZhMzFmNjU5MDQiLCJhdWQiOiJodHRwczovL2FwaS5hcGl4cGxhdGZvcm0uY29tIiwiZXhwIjoxNjM2NTYzMDg3LCJuYW1lIjoiTmFyYXlhbmEgS2VsbHVydSIsImVtYWlsIjoibmFyYXlhbmFAZGlnaWNhbC5jb20uc2cifQ.EKiwRmmftMwWacjFb7T8pa_Qg3To7b2qhDnGEEAN48kXrOLWE60xP0N7SIhKYUJa9vjmRyBSoz7zYDhYJdROOIc7E3kuAUgf0fNiR0_OtCKSYs303At4I68IzptHgE5e3T7jcRfuhU8PV6MMH6hdetU8BlXRg9ef3Z23MDnq2PwjbC4rOPeDczl9Vhhd4gJDbhyHpfAovFk1I4vKCShka40KFXMwPQVZwcOCEcbrtmOV-xvVSST9Psu1Z4TCheR2gSBh-ejfZRMSVDbbG72YVXLnTtvG0Ws_dbUyWD-3A7oyvc-Uqyl8vhiV6UmgKa1gXDBQV2RyArqFNOhVqLATag",
                }
            }).then(r => r.json().then(data => {
                if (data.statusCode === '200') {
                    if (data.result['match'] === 'yes') {
                        window.location.href = "/kyc";
                    } else {
                        document.getElementById("ErrorMessage").style.display = 'block';
                        document.getElementById("ErrorMessage").innerHTML = 'Mis matched.Please try again';
                    }
                } else if (data.statusCode === '400') {
                    document.getElementById("ErrorMessage").style.display = 'block';
                    document.getElementById("ErrorMessage").innerHTML = data.error;
                }

            })).catch(error => {
                console.log(error)
            });
        }
    </script>


    <%- include ("./_footer") -%>